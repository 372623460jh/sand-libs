"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _umi = require("umi");

var _context = _interopRequireDefault(require("./context"));

var _Navbar = _interopRequireDefault(require("./Navbar"));

var _SideMenu = _interopRequireDefault(require("./SideMenu"));

var _SlugList = _interopRequireWildcard(require("./SlugList"));

var _SearchBar = _interopRequireDefault(require("./SearchBar"));

require("prismjs/themes/prism.css");

require("katex/dist/katex.min.css");

require("./layout.less");

var _isHashRoute = _interopRequireDefault(require("../../utils/isHashRoute"));

var _getGotoPathName = _interopRequireDefault(require("../../utils/getGotoPathName"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * 从 route 中根据 pathname 来找到当前的选中 Meta 信息
 * @param route 所有的 router 列表
 * @param location 当前的 pathname 等信息
 * @returns { slugs = [] }
 */
var findCurrentRouteMeta = function findCurrentRouteMeta(route, location) {
  // remove suffix '/' from pathname
  var pathWithoutSuffix = location.pathname.replace(/(.)\/$/, '$1');
  var currentRoute = route.routes.find(function (item) {
    return item.path === pathWithoutSuffix;
  });
  return currentRoute ? currentRoute.meta || {} : null;
};

function getOffsetTop(target, container) {
  if (!target) {
    return 0;
  }

  if (!target.getClientRects().length) {
    return 0;
  }

  var rect = target.getBoundingClientRect();

  if (rect.width || rect.height) {
    if (container === window) {
      container = target.ownerDocument.documentElement;
      return rect.top - container.clientTop;
    }

    return rect.top - container.getBoundingClientRect().top;
  }

  return rect.top;
}

var Layout = /*#__PURE__*/function (_Component) {
  _inherits(Layout, _Component);

  var _super = _createSuper(Layout);

  function Layout() {
    var _this;

    _classCallCheck(this, Layout);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.state = {
      // control side menu in mobile responsive mode
      menuCollapsed: true,
      // save current slug (anchor)
      currentSlug: '',
      // save current locale
      currentLocale: '',
      // save meta for current route
      currentRouteMeta: {},
      // navs of current locale
      navs: [],
      // menus of current locale & nav path
      menus: []
    };
    _this.timeout = null;
    _this.timestamp = 0;

    _this.debounceOnScroll = function () {
      var debounce = 100;

      var _assertThisInitialize = _assertThisInitialized(_this),
          setAnchorToUrl = _assertThisInitialize.setAnchorToUrl;

      var callNow = !_this.timeout;

      if (callNow) {
        setAnchorToUrl();
      }

      var last = Date.now() - _this.timestamp;

      if (last < debounce && last >= 0) {
        window.clearTimeout(_this.timeout);
        _this.timeout = window.setTimeout(function () {
          _this.debounceOnScroll();
        }, debounce);
      } else {
        _this.timestamp = Date.now();
        setAnchorToUrl();
      }
    };

    _this.setAnchorToUrl = function () {
      if (typeof document === 'undefined') {
        return;
      }

      var location = _this.props.location;
      var _this$state$currentRo = _this.state.currentRouteMeta.slugs,
          slugs = _this$state$currentRo === void 0 ? [] : _this$state$currentRo;
      var currentSlug = _this.state.currentSlug; // 如果当前的 slugs 不含 currentSlug, 就去更新

      var container = window;
      var linkSections = [];

      _toConsumableArray(slugs).filter(function (_ref) {
        var depth = _ref.depth;
        return depth > 1;
      }) // 优先匹配深度比较深的
      .sort(function (a, b) {
        return a.depth - b.depth;
      }).forEach(function (_ref2) {
        var heading = _ref2.heading;
        // 寻找 dom 节点
        var target = document.getElementById(heading);

        if (!target) {
          return;
        } // 68 是顶栏高度，加上之后计算比较精确
        // getOffsetTop 计算的是视口与 dom 元素之间对的相对位置
        // 比 scrollTop 更加精确


        var reactTop = getOffsetTop(target, container) - 68; // 为了倾向在 10 和 -8 中选中10，对负值进行加权
        // 加权数选择了容易偏移量的 0.5，较少阈值小时的频繁跳动问题

        var top = reactTop > 0 ? reactTop : Math.abs(reactTop) + 50;

        if (top > 100) {
          return;
        }

        linkSections.push({
          heading: heading,
          top: top
        });
      }); // clear heading if scroll top than first section


      if (document.documentElement.scrollTop === 0) {
        if (location.hash) {
          _umi.history.replace(location.pathname);
        }

        return;
      }

      if (!linkSections.length) {
        return;
      } // 在符合的要求的里面选一个最小的


      var maxSection = linkSections.reduce(function (prev, curr) {
        return curr.top > prev.top ? curr : prev;
      });

      if (maxSection.heading !== currentSlug) {
        _umi.history.replace((0, _getGotoPathName.default)(location.pathname, maxSection.heading));
      }
    };

    _this.renderHero = function (hero) {
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("div", {
        className: "__dumi-default-layout-hero"
      }, /*#__PURE__*/_react.default.createElement("h1", null, hero.title), /*#__PURE__*/_react.default.createElement("div", {
        dangerouslySetInnerHTML: {
          __html: hero.desc
        }
      }), hero.actions && hero.actions.map(function (action) {
        return /*#__PURE__*/_react.default.createElement(_umi.Link, {
          to: action.link,
          key: action.text
        }, /*#__PURE__*/_react.default.createElement("button", {
          type: "button"
        }, action.text));
      })));
    };

    _this.renderFeatures = function (features) {
      return /*#__PURE__*/_react.default.createElement("div", {
        className: "__dumi-default-layout-features"
      }, features.map(function (feat) {
        return /*#__PURE__*/_react.default.createElement("dl", {
          key: feat.title,
          style: {
            backgroundImage: feat.icon ? "url(".concat(feat.icon, ")") : undefined
          }
        }, /*#__PURE__*/_react.default.createElement("dt", null, feat.title), /*#__PURE__*/_react.default.createElement("dd", {
          dangerouslySetInnerHTML: {
            __html: feat.desc
          }
        }));
      }));
    };

    return _this;
  }

  _createClass(Layout, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      window.requestAnimationFrame(function () {
        if (_this2.state.currentSlug) {
          var elm = document.getElementById(_this2.state.currentSlug);

          if (elm) {
            // 这里的 68 是顶栏的高度
            document.documentElement.scrollTop = getOffsetTop(elm, document.documentElement) - 100;
          }
        }

        window.addEventListener('scroll', _this2.debounceOnScroll, {
          passive: true
        });
      }); // discard end slash for path

      if (/\w\/$/.test(this.props.location.pathname)) {
        _umi.history.replace(this.props.location.pathname.replace(/\/$/, '') + this.props.location.hash);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener('scroll', this.debounceOnScroll);
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.location.pathname !== prevProps.location.pathname) {
        if (this.props.location.hash) {
          (0, _SlugList.scrollToSlug)(this.props.location.hash.replace('#', ''));
        } else {
          window.scrollTo(0, 0);
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _currentRouteMeta$slu,
          _locales$,
          _match,
          _this3 = this;

      var _this$props = this.props,
          mode = _this$props.mode,
          title = _this$props.title,
          desc = _this$props.desc,
          logo = _this$props.logo,
          repoUrl = _this$props.repoUrl,
          locales = _this$props.locales,
          algolia = _this$props.algolia,
          children = _this$props.children;
      var _this$state = this.state,
          navs = _this$state.navs,
          menus = _this$state.menus,
          menuCollapsed = _this$state.menuCollapsed,
          currentLocale = _this$state.currentLocale,
          currentSlug = _this$state.currentSlug,
          currentRouteMeta = _this$state.currentRouteMeta;
      var siteMode = this.props.mode === 'site';
      var showHero = siteMode && currentRouteMeta.hero;
      var showFeatures = siteMode && currentRouteMeta.features;
      var showSideMenu = currentRouteMeta.sidemenu !== false && !showHero && !showFeatures && !currentRouteMeta.gapless;
      var showSlugs = !showHero && !showFeatures && Boolean((_currentRouteMeta$slu = currentRouteMeta.slugs) === null || _currentRouteMeta$slu === void 0 ? void 0 : _currentRouteMeta$slu.length) && (currentRouteMeta.toc === 'content' || currentRouteMeta.toc === undefined) && !currentRouteMeta.gapless;
      var isCN = currentLocale === 'zh-CN' || currentLocale === '*' && ((_locales$ = locales[0]) === null || _locales$ === void 0 ? void 0 : _locales$.name) === 'zh-CN';
      var updatedTime = new Date(currentRouteMeta.updatedTime);
      var repoPlatform = {
        github: 'GitHub',
        gitlab: 'GitLab'
      }[((_match = (repoUrl || '').match(/(github|gitlab)/)) === null || _match === void 0 ? void 0 : _match[1]) || 'nothing'];

      try {
        updatedTime = updatedTime.toLocaleString(currentLocale);
      } catch (_unused) {
        updatedTime = updatedTime.toLocaleString();
      }

      return /*#__PURE__*/_react.default.createElement(_context.default.Provider, {
        value: {
          mode: mode,
          title: title,
          desc: desc,
          repoUrl: repoUrl,
          logo: logo,
          navs: navs,
          menus: menus,
          locales: locales,
          slug: currentSlug,
          locale: currentLocale,
          routeMeta: currentRouteMeta,
          rootPath: !locales.length || currentLocale === locales[0].name ? '/' : "/".concat(currentLocale),
          algolia: algolia
        }
      }, /*#__PURE__*/_react.default.createElement("div", {
        className: "__dumi-default-layout",
        "data-show-sidemenu": String(showSideMenu),
        "data-show-slugs": String(showSlugs),
        "data-site-mode": siteMode,
        "data-gapless": String(!!currentRouteMeta.gapless)
      }, /*#__PURE__*/_react.default.createElement(_Navbar.default, {
        navPrefix: /*#__PURE__*/_react.default.createElement(_SearchBar.default, {
          routes: this.props.route.routes
        }),
        onMobileMenuClick: function onMobileMenuClick() {
          return _this3.setState({
            menuCollapsed: !menuCollapsed
          });
        }
      }), /*#__PURE__*/_react.default.createElement(_SideMenu.default, {
        mobileMenuCollapsed: menuCollapsed,
        location: this.props.location
      }), showSlugs && /*#__PURE__*/_react.default.createElement(_SlugList.default, {
        base: "",
        slugs: currentRouteMeta.slugs,
        location: this.props.location,
        className: "__dumi-default-layout-toc"
      }), showHero && this.renderHero(currentRouteMeta.hero), showFeatures && this.renderFeatures(currentRouteMeta.features), /*#__PURE__*/_react.default.createElement("div", {
        className: "__dumi-default-layout-content"
      }, children, !showHero && !showFeatures && currentRouteMeta.filePath && !currentRouteMeta.gapless && /*#__PURE__*/_react.default.createElement("div", {
        className: "__dumi-default-layout-footer-meta"
      }, repoPlatform && /*#__PURE__*/_react.default.createElement("a", {
        target: "_blank",
        rel: "noopener noreferrer",
        href: "".concat(repoUrl, "/edit/master/").concat(currentRouteMeta.filePath)
      }, isCN ? "\u5728 ".concat(repoPlatform, " \u4E0A\u7F16\u8F91\u8FD9\u7BC7\u6587\u6863") : "Edit this doc on ".concat(repoPlatform), /*#__PURE__*/_react.default.createElement("svg", {
        xmlns: "http://www.w3.org/2000/svg",
        "aria-hidden": "true",
        x: "0px",
        y: "0px",
        viewBox: "0 0 100 100",
        width: "15",
        height: "15",
        className: "__dumi-default-external-link-icon"
      }, /*#__PURE__*/_react.default.createElement("path", {
        fill: "currentColor",
        d: "M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"
      }), /*#__PURE__*/_react.default.createElement("polygon", {
        fill: "currentColor",
        points: "45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"
      }))), /*#__PURE__*/_react.default.createElement("span", {
        "data-updated-text": isCN ? '最后更新时间：' : 'Last Update: '
      }, updatedTime)), (showHero || showFeatures) && currentRouteMeta.footer && /*#__PURE__*/_react.default.createElement("div", {
        className: "__dumi-default-layout-footer",
        dangerouslySetInnerHTML: {
          __html: currentRouteMeta.footer
        }
      }))));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(_ref3) {
      var _locales$2, _menus$state$currentL, _menus$state$currentL2;

      var locales = _ref3.locales,
          navs = _ref3.navs,
          location = _ref3.location,
          menus = _ref3.menus,
          route = _ref3.route;
      var navPath = '*';
      var state = {
        currentLocale: (locales[0] || {
          name: '*'
        }).name,
        currentRouteMeta: findCurrentRouteMeta(route, location),
        currentSlug: (0, _isHashRoute.default)(location) ? location.query.anchor : decodeURIComponent(location.hash).replace('#', ''),
        navs: [],
        menus: []
      };
      var isPrefixLocale = state.currentLocale !== ((_locales$2 = locales[0]) === null || _locales$2 === void 0 ? void 0 : _locales$2.name) && state.currentLocale !== '*';
      var rootPath = isPrefixLocale ? "/".concat(state.currentLocale) : '/'; // find locale in reverse way

      for (var i = locales.length - 1; i >= 0; i -= 1) {
        var localeName = (locales[i] || {
          name: ''
        }).name;

        if (location.pathname.startsWith("/".concat(localeName))) {
          state.currentLocale = localeName;
          break;
        }
      } // redirect to home page if there has no matched route


      if (!state.currentRouteMeta && location.pathname !== rootPath) {
        window.location.replace(rootPath); // just to avoid throw error

        state.currentRouteMeta = {};
      } // find nav in reverse way to fallback to the first nav


      if (location.pathname === rootPath) {
        navPath = rootPath;
      } else if (navs[state.currentLocale]) {
        for (var _i = navs[state.currentLocale].length - 1; _i >= 0; _i -= 1) {
          var nav = navs[state.currentLocale][_i];
          var items = [nav].concat(nav.children).filter(Boolean);
          var matched = items.find(function (item) {
            return item.path && new RegExp("^".concat(item.path.replace(/\.html$/, ''), "(/|.|$)")).test(location.pathname);
          });

          if (matched) {
            navPath = matched.path;
            break;
          }
        }
      }

      state.navs = navs[state.currentLocale] || [];
      state.menus = ((_menus$state$currentL = menus[state.currentLocale]) === null || _menus$state$currentL === void 0 ? void 0 : _menus$state$currentL[navPath]) || ((_menus$state$currentL2 = menus[state.currentLocale]) === null || _menus$state$currentL2 === void 0 ? void 0 : _menus$state$currentL2['*']) || [];
      return state;
    }
  }]);

  return Layout;
}(_react.Component);

exports.default = Layout;