"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function _path() {
    return data;
  };

  return data;
}

function _jsYaml() {
  const data = _interopRequireDefault(require("js-yaml"));

  _jsYaml = function _jsYaml() {
    return data;
  };

  return data;
}

function _slash() {
  const data = _interopRequireDefault(require("slash2"));

  _slash = function _slash() {
    return data;
  };

  return data;
}

function _esprimaExtractComments() {
  const data = _interopRequireDefault(require("esprima-extract-comments"));

  _esprimaExtractComments = function _esprimaExtractComments() {
    return data;
  };

  return data;
}

var _remark = _interopRequireDefault(require("./remark"));

var _html = _interopRequireDefault(require("./html"));

var _demo2 = _interopRequireWildcard(require("./demo"));

var _cache = _interopRequireDefault(require("../utils/cache"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const FRONT_COMMENT_EXP = /^\n*\/\*[^]+?\s*\*\/\n*/;
const markdownCache = new _cache.default();

// From: https://github.com/umijs/umi/blob/master/packages/umi-build-dev/src/routes/getYamlConfig.js
function getYamlConfig(code, componentFile = '') {
  const comments = (0, _esprimaExtractComments().default)(code);
  return comments.slice(0, 1).filter(c => c.value.includes(':') && c.loc.start.line === 1).reduce((memo, item) => {
    const value = item.value;
    const v = value.replace(/^(\s+)?\*/gm, '');

    try {
      const yamlResult = _jsYaml().default.safeLoad(v);

      return _objectSpread(_objectSpread({}, memo), yamlResult);
    } catch (e) {
      console.warn(`Annotation fails to parse - ${componentFile}: ${e}`);
    }

    return memo;
  }, {});
}

function wrapperHtmlByComponent(jsx, meta) {
  return `
    import { Link } from 'umi';
    import React from 'react';
    import Alert from '${(0, _slash().default)(_path().default.join(__dirname, '../themes/default/builtins/Alert.js'))}';
    import Badge from '${(0, _slash().default)(_path().default.join(__dirname, '../themes/default/builtins/Badge.js'))}';
    import SourceCode from '${(0, _slash().default)(_path().default.join(__dirname, '../themes/default/builtins/SourceCode.js'))}';
    import DumiPreviewer from '${(0, _slash().default)(_path().default.join(__dirname, '../themes/default/builtins/Previewer.js'))}';

    ${(meta.demos || []).join('\n')}

    export default function () {
      return (
        <>
          ${meta.translateHelp ? "<Alert>This article has not been translated yet. Want to help us out? Click the Edit this doc on GitHub at the end of the page.</Alert>" : ''}
          ${jsx}
        </>
      );
  }`;
}

var _default = {
  /**
   * transform markdown content to jsx & meta data
   * @param raw         content
   * @param opts        transform options
   * @param fileAbsPath  absolute path of markdown file
   * @param onlyConfig  whether transform meta data only
   */
  markdown(raw, opts = {}) {
    const result = // use cache first, for HMR performance
    opts.onlyConfig && markdownCache.get(opts.fileAbsPath) || (0, _remark.default)(raw, {
      fileAbsPath: opts.fileAbsPath,
      strategy: opts.onlyConfig ? 'data' : 'default',
      previewLangs: opts.previewLangs || []
    });

    const _ref = result.data,
          demos = _ref.demos,
          metas = _objectWithoutProperties(_ref, ["demos"]);

    let content = '';

    if (opts.fileAbsPath) {
      markdownCache.add(opts.fileAbsPath, result);
    }

    if (!opts.onlyConfig) {
      // transform html string to jsx string
      content = this.html(result.contents); // wrap by page component

      content = wrapperHtmlByComponent(content, result.data);
    }

    return {
      content,
      html: result.contents,
      config: _objectSpread({}, metas)
    };
  },

  jsx(raw) {
    return {
      // discard frontmatter for source code display
      content: raw.replace(FRONT_COMMENT_EXP, ''),
      config: getYamlConfig(raw)
    };
  },

  tsx(raw) {
    return this.jsx(raw);
  },

  /**
   * transform html string to jsx string
   * @param raw   html string
   */
  html(raw) {
    return (0, _html.default)(raw);
  },

  /**
   * transform code block (j|t)sx demo to js
   */
  demo(raw, opts) {
    const _demo = (0, _demo2.default)(raw, opts),
          content = _demo.content,
          ast = _demo.ast;

    const deps = (0, _demo2.getDepsForDemo)(ast, opts);
    return {
      content,
      config: deps
    };
  }

};
exports.default = _default;