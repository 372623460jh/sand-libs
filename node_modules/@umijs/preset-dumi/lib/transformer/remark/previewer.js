"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = previewer;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _unistUtilVisit() {
  const data = _interopRequireDefault(require("unist-util-visit"));

  _unistUtilVisit = function _unistUtilVisit() {
    return data;
  };

  return data;
}

var _demo = _interopRequireWildcard(require("../demo"));

var _index = _interopRequireDefault(require("../index"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function visitor(node, i, parent) {
  var _node$properties;

  if (node.tagName === 'div' && ((_node$properties = node.properties) === null || _node$properties === void 0 ? void 0 : _node$properties.type) === 'previewer') {
    var _node$properties2, _node$properties3, _this$vFile$data$demo;

    const source = ((_node$properties2 = node.properties) === null || _node$properties2 === void 0 ? void 0 : _node$properties2.source) || {};
    const yaml = ((_node$properties3 = node.properties) === null || _node$properties3 === void 0 ? void 0 : _node$properties3.meta) || {};
    const raw = source.tsx || source.jsx;
    const demoOpts = {
      isTSX: Boolean(source.tsx),
      fileAbsPath: // for external demo
      node.properties.filePath || // for embed demo
      this.data('fileAbsPath')
    };
    let transformCode = raw; // transform markdown for previewer desc field

    Object.keys(yaml).forEach(key => {
      if (/^desc(\.|$)/.test(key)) {
        yaml[key] = _index.default.markdown(yaml[key]).html;
      }
    }); // use import way rather than source code way for external demo (for HMR & sourcemap)

    if (node.properties.filePath) {
      transformCode = `
import React from 'react';
import Demo from '${node.properties.filePath}';

export default () => <Demo />;`;
    } // transform demo source code


    const _demoTransformer = (0, _demo.default)(transformCode, demoOpts),
          code = _demoTransformer.content;

    const _getDepsForDemo = (0, _demo.getDepsForDemo)(raw, demoOpts),
          dependencies = _getDepsForDemo.dependencies,
          files = _getDepsForDemo.files;

    const CSSInDeps = (0, _demo.getCSSForDeps)(dependencies); // save css in dependencies, such as antd.css

    if (CSSInDeps.length) {
      yaml.CSSInDependencies = CSSInDeps;
    } // save code into data then declare them on the top page component


    this.vFile.data.demos = (this.vFile.data.demos || []).concat(`const ${_demo.DEMO_COMPONENT_NAME}${(((_this$vFile$data$demo = this.vFile.data.demos) === null || _this$vFile$data$demo === void 0 ? void 0 : _this$vFile$data$demo.length) || 0) + 1} = React.memo(${code});`); // replace original node

    parent.children[i] = {
      previewer: true,
      type: 'raw',
      value: `
<DumiPreviewer
  source={${JSON.stringify(source)}}
  {...${JSON.stringify(_objectSpread(_objectSpread({}, yaml), {}, {
        dependencies,
        files
      }))}}
>
  <${_demo.DEMO_COMPONENT_NAME}${this.vFile.data.demos.length} />
</DumiPreviewer>`
    };
  }
}

function previewer() {
  return (ast, vFile) => {
    (0, _unistUtilVisit().default)(ast, 'element', visitor.bind({
      vFile,
      data: this.data
    }));
  };
}