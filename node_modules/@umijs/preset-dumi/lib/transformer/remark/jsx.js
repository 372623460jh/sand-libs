"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _unistUtilVisit() {
  const data = _interopRequireDefault(require("unist-util-visit"));

  _unistUtilVisit = function _unistUtilVisit() {
    return data;
  };

  return data;
}

function _unistUtilVisitParents() {
  const data = _interopRequireDefault(require("unist-util-visit-parents"));

  _unistUtilVisitParents = function _unistUtilVisitParents() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const SINGLE_TAGS_EXPS = ['area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'].map(tag => new RegExp(`<(${tag}[^>]*?)>`, 'g'));

const textVisitor = node => {
  // escape { & } for JSX
  // TODO: find a better way to avoid multi-times escape
  if (!/'[{}]+'/.test(node.value)) {
    node.value = node.value.replace(/([{}]+)/g, "{'$1'}");
  }
};

const rawVisitor = (node, i, parent) => {
  const PRE_EXP = /^<pre>([^]+)<\/pre>$/;
  const COMMENT_EXP = /^\s*<!--[^]+-->\s*$/; // convert \n to <br> in code block for pre tag

  if (PRE_EXP.test(node.value)) {
    const content = node.value.match(PRE_EXP)[1].replace(/^\n|\n$/g, '').replace(/\n/g, '<br />');
    node.value = `<pre>${content}</pre>`;
  } // remove HTML comments for JSX


  if (COMMENT_EXP.test(node.value)) {
    parent.children.splice(i, 1);
  } // convert all self-closing HTML tag
  // see also: https://github.com/umijs/umi/blob/master/packages/umi-build-dev/src/htmlToJSX.js#L118


  if (!node.previewer) {
    SINGLE_TAGS_EXPS.forEach(regex => {
      node.value = node.value.replace(regex, (_, str) => {
        if (str.endsWith('/')) {
          return `<${str}>`;
        }

        return `<${str} />`;
      });
    });
  }
};

var _default = () => ast => {
  (0, _unistUtilVisitParents().default)(ast, 'text', textVisitor);
  (0, _unistUtilVisit().default)(ast, 'raw', rawVisitor);
};

exports.default = _default;