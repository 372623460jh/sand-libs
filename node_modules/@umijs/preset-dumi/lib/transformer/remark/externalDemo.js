"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HTMLAttrParser = HTMLAttrParser;
exports.default = externalDemo;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _fs() {
  const data = _interopRequireDefault(require("fs"));

  _fs = function _fs() {
    return data;
  };

  return data;
}

function _unistUtilVisit() {
  const data = _interopRequireDefault(require("unist-util-visit"));

  _unistUtilVisit = function _unistUtilVisit() {
    return data;
  };

  return data;
}

var _context = _interopRequireDefault(require("../../context"));

var _moduleResolver = require("../../utils/moduleResolver");

var _index = _interopRequireDefault(require("../index"));

var _getDemoRoutes = require("../../routes/getDemoRoutes");

var _watcher = require("../../utils/watcher");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const DEMO_TOKEN_EXP = /<(code) ([^>]+?)\/?>/;
/**
 * simple parser for parse HTML attributes
 * @param str   attributes string on HTML tag
 */

function HTMLAttrParser(str) {
  const attrs = {};
  (str || '').replace(/([^=\s]+)(="([^"]+)"|='([^']+)')?/g, (_, name, content, value1, value2) => {
    attrs[name] = content ? value1 || value2 : true; // try to parse JSON field value

    if (/^(\[|{)[^]*(]|})$/.test(attrs[name])) {
      try {
        attrs[name] = JSON.parse(attrs[name]);
      } catch (err) {
        /* nothing */
      }
    }

    return _;
  });
  return attrs;
}

function externalDemo() {
  // clear exist watchers, use for unlink some demo from md file
  (0, _watcher.closeWatchersForFile)(this.data('fileAbsPath'));
  return ast => {
    (0, _unistUtilVisit().default)(ast, 'html', (node, i, parent) => {
      if (typeof node.value === 'string') {
        // split multiple code tag
        const tags = node.value.match(/<code.*?(<\/code>|\/?>)/g);
        const demos = [];
        (tags || []).forEach(tag => {
          const matches = tag.match(DEMO_TOKEN_EXP) || [];

          const _HTMLAttrParser = HTMLAttrParser(matches[2]),
                src = _HTMLAttrParser.src,
                inheritAttrs = _objectWithoutProperties(_HTMLAttrParser, ["src"]);

          if (src) {
            let absPath = (0, _moduleResolver.getModuleResolvePath)({
              basePath: this.data('fileAbsPath'),
              sourcePath: src,
              extensions: ['.tsx', '.jsx']
            });
            const lang = absPath.match(/\.(\w+)$/)[1]; // read external demo content and convert node to demo node

            const result = _index.default[lang](_fs().default.readFileSync(absPath).toString()); // add single route for external demo


            inheritAttrs.path = (0, _getDemoRoutes.addDemoRoute)(absPath);
            demos.push({
              type: 'demo',
              lang,
              value: result.content,
              filePath: absPath,
              meta: _objectSpread(_objectSpread({}, inheritAttrs), result.config)
            });
            (0, _watcher.saveFileOnDepChange)(this.data('fileAbsPath'), absPath);
          } else if (matches[1]) {
            _context.default.umi.logger.error(`[dumi]: expected a code element with valid src property but got ${node.value}`);
          }
        }); // replace original node with demo(s)

        if (demos.length) {
          parent.children.splice(i, 1, ...demos);
        }
      }
    });
  };
}