"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _remarkParse() {
  const data = _interopRequireDefault(require("remark-parse"));

  _remarkParse = function _remarkParse() {
    return data;
  };

  return data;
}

var _ = _interopRequireDefault(require(".."));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const _ref = _remarkParse().default.Parser.prototype,
      blockTokenizers = _ref.blockTokenizers,
      inlineTokenizers = _ref.inlineTokenizers,
      setOptions = _ref.setOptions;

const oFencedCode = blockTokenizers.fencedCode;
const DISABLEABLE_TOKENIZERS = ['indentedCode', 'blockquote', 'thematicBreak', 'list', 'setextHeading', 'footnote', 'definition', 'table', 'autoLink', 'url', 'html', 'reference', 'break'];
/**
 * parser for parse modifier of code block
 * @param meta  meta raw string
 */

function codeBlockModifierParser(meta) {
  return (meta || '').split('|').reduce((result, item) => {
    item = String.prototype.trim.call(item);

    if (item) {
      result[item] = true;
    }

    return result;
  }, {});
} // override original fencedCode tokenizer


blockTokenizers.fencedCode = function fencedCode(...args) {
  const result = oFencedCode.apply(this, args); // only process needed code block

  if (result && this.options.langs.indexOf(result.lang) > -1) {
    const modifier = codeBlockModifierParser(result.meta); // extract frontmatters for embedded demo and omit the useless slugs field

    const _transformer$result$l = _.default[result.lang](result.value),
          content = _transformer$result$l.content,
          _transformer$result$l2 = _transformer$result$l.config,
          slugs = _transformer$result$l2.slugs,
          config = _objectWithoutProperties(_transformer$result$l2, ["slugs"]);

    if (modifier.pure) {
      // clear useless meta if the lang with pure modifier
      result.meta = result.meta.replace(/ ?\| ?pure/, '');
    } else {
      // customize type (use for rehype demo handler)
      result.type = 'demo';
      result.meta = _objectSpread(_objectSpread({}, modifier), config);
      result.value = content;
    }
  }

  return result;
};
/**
 * a decorator use for turn off tokenizer feature
 * @param oTokenizer the original tokenizer
 */


function tokenizerDecorator(oTokenizer) {
  const tokenizer = function tokenizer(...args) {
    // turn off disableable tokenizers if strategy is 'data'
    if (this.options.strategy === 'data' && DISABLEABLE_TOKENIZERS.indexOf(oTokenizer.name) > -1) {
      return true;
    }

    return oTokenizer.apply(this, args);
  };

  if (oTokenizer.locator) {
    tokenizer.locator = oTokenizer.locator;
  }

  return tokenizer;
} // decorate for all block tokenizers


Object.keys(blockTokenizers).forEach(method => {
  blockTokenizers[method] = tokenizerDecorator(blockTokenizers[method]);
}); // decorate for all inline tokenizers

Object.keys(inlineTokenizers).forEach(method => {
  inlineTokenizers[method] = tokenizerDecorator(inlineTokenizers[method]);
}); // proxy set options to avoid remove the custom strategy option

_remarkParse().default.Parser.prototype.setOptions = function (opts) {
  if (this.options.strategy) {
    opts.strategy = this.options.strategy;
    opts.langs = this.options.langs;
  }

  setOptions.call(this, opts);
};

var _default = _remarkParse().default;

exports.default = _default;