"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = yamlProcessor;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _fs() {
  const data = _interopRequireDefault(require("fs"));

  _fs = function _fs() {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function _path() {
    return data;
  };

  return data;
}

function _jsYaml() {
  const data = _interopRequireDefault(require("js-yaml"));

  _jsYaml = function _jsYaml() {
    return data;
  };

  return data;
}

function _slash() {
  const data = _interopRequireDefault(require("slash2"));

  _slash = function _slash() {
    return data;
  };

  return data;
}

function _child_process() {
  const data = require("child_process");

  _child_process = function _child_process() {
    return data;
  };

  return data;
}

function _unistUtilVisit() {
  const data = _interopRequireDefault(require("unist-util-visit"));

  _unistUtilVisit = function _unistUtilVisit() {
    return data;
  };

  return data;
}

var _index = _interopRequireDefault(require("../index"));

var _context = _interopRequireDefault(require("../../context"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function yamlProcessor() {
  return (ast, vFile) => {
    if (this.data('fileAbsPath')) {
      var _ctx$umi;

      const filePath = (0, _slash().default)(_path().default.relative(((_ctx$umi = _context.default.umi) === null || _ctx$umi === void 0 ? void 0 : _ctx$umi.cwd) || process.cwd(), this.data('fileAbsPath'))); // append file info

      vFile.data.filePath = filePath;

      try {
        const updatedTime = parseInt((0, _child_process().execSync)(`git log -1 --format=%at ${this.data('fileAbsPath')}`, {
          stdio: 'pipe'
        }).toString(), 10) * 1000;

        if (Number.isNaN(updatedTime)) {
          throw 'get updatedTime failed';
        }

        vFile.data.updatedTime = updatedTime;
      } catch (err) {
        vFile.data.updatedTime = Math.floor(_fs().default.lstatSync(this.data('fileAbsPath')).mtimeMs);
      }
    }

    (0, _unistUtilVisit().default)(ast, 'yaml', node => {
      var _data$hero;

      const data = _jsYaml().default.safeLoad(node.value); // parse markdown for features in home page


      if (data.features) {
        data.features.forEach(feat => {
          if (feat.desc) {
            feat.desc = _index.default.markdown(feat.desc).html;
          }
        });
      } // parse markdown for desc in home page


      if ((_data$hero = data.hero) === null || _data$hero === void 0 ? void 0 : _data$hero.desc) {
        data.hero.desc = _index.default.markdown(data.hero.desc).html;
      } // parse markdown for footer in home page


      if (data.footer) {
        data.footer = _index.default.markdown(data.footer).html;
      } // save frontmatter to data


      vFile.data = Object.assign(vFile.data || {}, data);
    });
  };
}